{"version":3,"sources":["webpack:///./web/static/js/app/components/chat/suggestion/suggestion_box.jsx?169e"],"names":[],"mappings":"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","file":"0.5df01f7ed5740476623a.hot-update.js","sourcesContent":["// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport $ from 'jquery';\nimport ReactDOM from 'react-dom';\n\nimport Constants from '../../../constants/chat_constants';\nimport * as GlobalActions from '../../../actions/chatActions';\nimport * as Utils from '../../../utils/general';\n\nimport TextareaAutosize from 'react-textarea-autosize';\n\nconst KeyCodes = Constants.KeyCodes;\n\nimport React from 'react';\n\nexport default class SuggestionBox extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleDocumentClick = this.handleDocumentClick.bind(this);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleCompleteWord = this.handleCompleteWord.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handlePretextChanged = this.handlePretextChanged.bind(this);\n\n        this.suggestionId = Utils.generateId();\n    }\n\n    componentDidMount() {\n        //SuggestionStore.registerSuggestionBox(this.suggestionId);\n        $(document).on('click', this.handleDocumentClick);\n\n       // SuggestionStore.addCompleteWordListener(this.suggestionId, this.handleCompleteWord);\n        //SuggestionStore.addPretextChangedListener(this.suggestionId, this.handlePretextChanged);\n    }\n\n    componentWillUnmount() {\n        //SuggestionStore.removeCompleteWordListener(this.suggestionId, this.handleCompleteWord);\n        //SuggestionStore.removePretextChangedListener(this.suggestionId, this.handlePretextChanged);\n\n        //SuggestionStore.unregisterSuggestionBox(this.suggestionId);\n        $(document).off('click', this.handleDocumentClick);\n    }\n\n    getTextbox() {\n        // this is to support old code that looks at the input/textarea DOM nodes\n        let textbox = this.refs.textbox;\n\n        if (!(textbox instanceof HTMLElement)) {\n            textbox = ReactDOM.findDOMNode(textbox);\n        }\n\n        return textbox;\n    }\n\n    handleDocumentClick(e) {\n        const container = $(ReactDOM.findDOMNode(this));\n        if (!(container.is(e.target) || container.has(e.target).length > 0)) {\n            // we can't just use blur for this because it fires and hides the children before\n            // their click handlers can be called\n            GlobalActions.emitClearSuggestions(this.suggestionId);\n\n             store.dispatch({\n                        type: ActionType.SUGGESTIONS_CHANGED,\n                        id:id,\n\n                        });\n        }\n    }\n\n    handleChange(e) {\n        const textbox = ReactDOM.findDOMNode(this.refs.textbox);\n        const caret = Utils.getCaretPosition(textbox);\n        const pretext = textbox.value.substring(0, caret);\n\n        GlobalActions.emitSuggestionPretextChanged(this.suggestionId, pretext);\n\n        if (this.props.onUserInput) {\n            this.props.onUserInput(textbox.value);\n        }\n\n        if (this.props.onChange) {\n            this.props.onChange(e);\n        }\n    }\n\n    handleCompleteWord(term) {\n        const textbox = ReactDOM.findDOMNode(this.refs.textbox);\n        const caret = Utils.getCaretPosition(textbox);\n\n        const text = this.props.value;\n        const prefix = \"\";//text.substring(0, caret - SuggestionStore.getMatchedPretext(this.suggestionId).length);\n        const suffix = text.substring(caret);\n\n        if (this.props.onUserInput) {\n            this.props.onUserInput(prefix + term + ' ' + suffix);\n        }\n\n        // set the caret position after the next rendering\n        window.requestAnimationFrame(() => {\n            Utils.setCaretPosition(textbox, prefix.length + term.length + 1);\n        });\n    }\n\n    handleKeyDown(e) {\n       /* if (SuggestionStore.hasSuggestions(this.suggestionId)) {\n            if (e.which === KeyCodes.UP) {\n                GlobalActions.emitSelectPreviousSuggestion(this.suggestionId);\n                e.preventDefault();\n            } else if (e.which === KeyCodes.DOWN) {\n                GlobalActions.emitSelectNextSuggestion(this.suggestionId);\n                e.preventDefault();\n            } else if (e.which === KeyCodes.ENTER || e.which === KeyCodes.TAB) {\n                GlobalActions.emitCompleteWordSuggestion(this.suggestionId);\n                e.preventDefault();\n            } else if (this.props.onKeyDown) {\n                this.props.onKeyDown(e);\n            }\n        } else if (this.props.onKeyDown) {\n            this.props.onKeyDown(e);\n        }*/\n    }\n\n    handlePretextChanged(pretext) {\n        for (const provider of this.props.providers) {\n            provider.handlePretextChanged(this.suggestionId, pretext);\n        }\n    }\n\n    render() {\n        const newProps = Object.assign({}, this.props, {\n            onChange: this.handleChange,\n            onKeyDown: this.handleKeyDown\n        });\n\n        let textbox = null;\n        if (this.props.type === 'input') {\n            textbox = (\n                <input\n                    ref='textbox'\n                    type='text'\n                    {...newProps}\n                />\n            );\n        } else if (this.props.type === 'search') {\n            textbox = (\n                <input\n                    ref='textbox'\n                    type='search'\n                    {...newProps}\n                />\n            );\n        } else if (this.props.type === 'textarea') {\n            textbox = (\n                <TextareaAutosize\n                    id={this.suggestionId}\n                    ref='textbox'\n                    {...newProps}\n                />\n            );\n        }\n\n        const SuggestionListComponent = this.props.listComponent;\n\n        return (\n            <div>\n                {textbox}\n                <SuggestionListComponent suggestionId={this.suggestionId}/>\n            </div>\n        );\n    }\n}\n\nSuggestionBox.defaultProps = {\n    type: 'input'\n};\n\nSuggestionBox.propTypes = {\n    listComponent: React.PropTypes.func.isRequired,\n    type: React.PropTypes.oneOf(['input', 'textarea', 'search']).isRequired,\n    value: React.PropTypes.string.isRequired,\n    onUserInput: React.PropTypes.func,\n    providers: React.PropTypes.arrayOf(React.PropTypes.object),\n\n    // explicitly name any input event handlers we override and need to manually call\n    onChange: React.PropTypes.func,\n    onKeyDown: React.PropTypes.func,\n    onHeightChange: React.PropTypes.func\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./web/static/js/app/components/chat/suggestion/suggestion_box.jsx\n **/"],"sourceRoot":""}