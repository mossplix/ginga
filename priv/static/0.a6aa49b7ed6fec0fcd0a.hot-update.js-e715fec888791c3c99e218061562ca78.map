{"version":3,"sources":["webpack:///./web/static/js/app/components/chat/MessageComposer.react.js?efe1"],"names":[],"mappings":"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","file":"0.a6aa49b7ed6fec0fcd0a.hot-update.js","sourcesContent":["\nimport { connect } from 'react-redux'\nvar React = require('react');\nvar ENTER_KEY_CODE = 13;\n\nimport $ from 'jquery';\nimport AtMentionProvider from './suggestion/at_mention_provider';\nimport CommandProvider from './suggestion/command_provider';\nimport EmoticonProvider from './suggestion/emoticon_provider';\nimport SuggestionList from './suggestion/suggestion_list';\nimport SuggestionBox from './suggestion/suggestion_box';\n\nimport * as TextFormatting from '../../utils/text_formatting';\n\nconst PreReleaseFeatures = Constants.PRE_RELEASE_FEATURES;\n\nimport {intlShape, injectIntl, defineMessages, FormattedHTMLMessage,FormattedMessage} from 'react-intl';\n\n\nconst Preferences = Constants.Preferences;\nconst TutorialSteps = Constants.TutorialSteps;\nconst ActionTypes = Constants.ActionTypes;\n\n\nimport MsgTyping from './msg_typing.jsx';\n\nimport FileUpload from './files/file_upload.jsx';\nimport FilePreview from './files/file_preview.jsx';\n\nimport TutorialTip from '../tutorial/tutorial_tip';\nimport * as ChatActions from '../../actions/chatActions';\nimport * as Utils from '../../utils/general';\nimport Constants from '../../constants/chat_constants';\n\n\nvar  KeyCodes = require(\"../../utils/keyCode\");\n\nconst holders = defineMessages({\n    comment: {\n        id: 'create_post.comment',\n        defaultMessage: 'Comment',\n        description: \"comment\"\n    },\n    post: {\n        id: 'create_post.post',\n        defaultMessage: 'Post',\n         description: \"post\"\n    },\n    write: {\n        id: 'create_post.write',\n        defaultMessage: 'Write a message...',\n         description: \"message\"\n    }\n});\n\n\n\n\nvar MessageComposer = React.createClass({\n\n\n  getInitialState: function() {\n      const draft = this.getCurrentDraft();\n    return {messageText: '',\n            channelId: this.props.currentChat.id,\n            messageText: draft.messageText,\n            uploadsInProgress: draft.uploadsInProgress,\n            previews: draft.previews,\n            submitting: false,\n            initialText: draft.messageText,\n            ctrlSend: false,\n            showTutorialTip: false,\n            showPostDeletedModal: false\n\n\n    };\n  },\n\n\n\n   getFileCount(channelId) {\n\n   },\n    handleSubmit(e) {\n        e.preventDefault();\n\n        if (this.state.uploadsInProgress.length > 0 || this.state.submitting) {\n            return;\n        }\n\n        const post = {};\n        post.filenames = [];\n        post.message = this.state.messageText;\n\n        if (post.message.trim().length === 0 && this.state.previews.length === 0) {\n            return;\n        }\n\n\n        this.setState({submitting: true, serverError: null});\n\n        if (post.message.indexOf('/') === 0) {\n            /*Client.executeCommand(\n                this.state.channelId,\n                post.message,\n                false,\n                (data) => {\n                    PostStore.storeDraft(this.state.channelId, null);\n                    this.setState({messageText: '', submitting: false, postError: null, previews: [], serverError: null});\n\n                    if (data.goto_location && data.goto_location.length > 0) {\n                        browserHistory.push(data.goto_location);\n                    }\n                },\n                (err) => {\n                    if (err.sendMessage) {\n                        this.sendMessage(post);\n                    } else {\n                        const state = {};\n                        state.serverError = err.message;\n                        state.submitting = false;\n                        this.setState(state);\n                    }\n                }\n            );*/\n        } else {\n            this.sendMessage(post);\n        }\n    },\n    sendMessage(post) {\n            post.channel_id = this.state.channelId;\n            post.filenames = this.state.previews;\n\n            const time = Utils.getTimestamp();\n            const userId = store.getState.session.currentUser.id;\n            post.pending_post_id = `${userId}:${time}`;\n            post.user_id = userId;\n            post.create_at = time;\n            post.parent_id = this.state.parentId;\n\n            const channel = this.props.currentChat.channel;\n\n            //ChatActions.emitUserPostedEvent(post);\n\n            this.setState({messageText: '', submitting: false, postError: null, previews: [], serverError: null});\n\n\n        },\n    postMsgKeyPress(e) {\n            if (this.state.ctrlSend && e.ctrlKey || !this.state.ctrlSend) {\n                if (e.which === KeyCodes.ENTER && !e.shiftKey && !e.altKey) {\n                    e.preventDefault();\n                    ReactDOM.findDOMNode(this.refs.textbox).blur();\n                    this.handleSubmit(e);\n                }\n            }\n\n            //ChatActions.emitLocalUserTypingEvent(this.state.channelId, '');\n        },\n    removePreview(id) {\n            const previews = Object.assign([], this.state.previews);\n            const uploadsInProgress = this.state.uploadsInProgress;\n\n            // id can either be the path of an uploaded file or the client id of an in progress upload\n            let index = previews.indexOf(id);\n            if (index === -1) {\n                index = uploadsInProgress.indexOf(id);\n\n                if (index !== -1) {\n                    uploadsInProgress.splice(index, 1);\n                    this.refs.fileUpload.getWrappedInstance().cancelUpload(id);\n                }\n            } else {\n                previews.splice(index, 1);\n            }\n\n            const draft = {};//PostStore.getCurrentDraft();\n            draft.previews = previews;\n            draft.uploadsInProgress = uploadsInProgress;\n            //PostStore.storeCurrentDraft(draft);\n\n            this.setState({previews, uploadsInProgress});\n        },\n       handleUserInput(messageText) {\n        this.setState({messageText});\n\n    },\n   handleUploadClick() {\n        this.focusTextbox();\n    },\n    handleUploadStart(clientIds, channelId) {\n        const draft = PostStore.getDraft(channelId);\n\n        draft.uploadsInProgress = draft.uploadsInProgress.concat(clientIds);\n        PostStore.storeDraft(channelId, draft);\n\n        this.setState({uploadsInProgress: draft.uploadsInProgress});\n\n        // this is a bit redundant with the code that sets focus when the file input is clicked,\n        // but this also resets the focus after a drag and drop\n        this.focusTextbox();\n    },\n    handleFileUploadComplete(filenames, clientIds, channelId) {\n        const draft = PostStore.getDraft(channelId);\n\n        // remove each finished file from uploads\n        for (let i = 0; i < clientIds.length; i++) {\n            const index = draft.uploadsInProgress.indexOf(clientIds[i]);\n\n            if (index !== -1) {\n                draft.uploadsInProgress.splice(index, 1);\n            }\n        }\n\n        draft.previews = draft.previews.concat(filenames);\n        PostStore.storeDraft(channelId, draft);\n\n        this.setState({uploadsInProgress: draft.uploadsInProgress, previews: draft.previews});\n    },\n     handleUploadClick() {\n        this.focusTextbox();\n    },\n    handleUploadError(err, clientId) {\n        let message = err;\n        if (message && typeof message !== 'string') {\n            // err is an AppError from the server\n            message = err.message;\n        }\n\n        if (clientId !== -1) {\n            const draft = PostStore.getDraft(this.state.channelId);\n\n            const index = draft.uploadsInProgress.indexOf(clientId);\n            if (index !== -1) {\n                draft.uploadsInProgress.splice(index, 1);\n            }\n\n            PostStore.storeDraft(this.state.channelId, draft);\n\n            this.setState({uploadsInProgress: draft.uploadsInProgress});\n        }\n\n        this.setState({serverError: message});\n    },\n\n\n        getCurrentDraft() {\n        const draft = null;\n        const safeDraft = {previews: [], messageText: '', uploadsInProgress: []};\n\n        if (draft) {\n            if (draft.message) {\n                safeDraft.messageText = draft.message;\n            }\n            if (draft.previews) {\n                safeDraft.previews = draft.previews;\n            }\n            if (draft.uploadsInProgress) {\n                safeDraft.uploadsInProgress = draft.uploadsInProgress;\n            }\n        }\n\n        return safeDraft;\n    },\n    handleKeyDown(e) {\n        if (this.state.ctrlSend && e.keyCode === KeyCodes.ENTER && e.ctrlKey === true) {\n            this.postMsgKeyPress(e);\n            return;\n        }\n\n        if (e.keyCode === KeyCodes.UP && this.state.messageText === '') {\n            e.preventDefault();\n\n            const channelId = this.props.currentChat.id;\n            const lastPost = this.props.message.lastPost;\n            if (!lastPost) {\n                return;\n            }\n            const {formatMessage} = this.props.intl;\n            var type = (lastPost.root_id && lastPost.root_id.length > 0) ? formatMessage(holders.comment) : formatMessage(holders.post);\n\n            store.dispatch({\n                        type: ActionType.MESSAGE_CREATED_EDITED,\n                        refocusId: '#post_textbox',\n                         title: type,\n                         message: lastPost.message,\n                         postId: lastPost.id,\n                         channelId: lastPost.channel_id,\n                        });\n\n        }\n    },\n\n createTutorialTip() {\n        const screens = [];\n\n        screens.push(\n            <div>\n                <FormattedHTMLMessage\n                    id='create_post.tutorialTip'\n                    defaultMessage='<h4>Sending Messages</h4><p>Type here to write a message and press <strong>Enter</strong> to post it.</p><p>Click the <strong>Attachment</strong> button to upload an image or a file.</p>'\n                />\n            </div>\n        );\n\n        return (\n            <TutorialTip\n                placement='top'\n                screens={screens}\n                overlayClass='tip-overlay--chat'\n            />\n        );\n    },\n\n  render: function() {\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className='has-error'>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n         let postError = null;\n        if (this.state.postError) {\n            postError = <label className='control-label'>{this.state.postError}</label>;\n        }\n\n        let preview = null;\n        if (this.state.previews.length > 0 || this.state.uploadsInProgress.length > 0) {\n            preview = (\n                <FilePreview\n                    files={this.state.previews}\n                    onRemove={this.removePreview}\n                    uploadsInProgress={this.state.uploadsInProgress}\n                />\n            );\n        }\n        let postFooterClassName = 'post-create-footer';\n        if (postError) {\n            postFooterClassName += ' has-error';\n        }\n\n       const hasText = this.state.messageText.length > 0;\n\n        let previewLink = null;\n        if (Utils.isFeatureEnabled(PreReleaseFeatures.MARKDOWN_PREVIEW)) {\n            previewLink = (\n                <a\n                    onClick={this.showPreview}\n                    className='textbox-preview-link'\n                >\n                    {this.state.preview ? (\n                        <FormattedMessage\n                            id='textbox.edit'\n                            defaultMessage='Edit message'\n                        />\n                    ) : (\n                        <FormattedMessage\n                            id='textbox.preview'\n                            defaultMessage='Preview'\n                        />\n                    )}\n                </a>\n            );\n        };\n        const helpText = (\n            <div\n                style={{visibility: hasText ? 'visible' : 'hidden', opacity: hasText ? '0.3' : '0'}}\n                className='help__format-text'\n            >\n                <b>\n                    <FormattedMessage\n                        id='textbox.bold'\n                        defaultMessage='**bold**'\n                    />\n                </b>\n                <i>\n                    <FormattedMessage\n                        id='textbox.italic'\n                        defaultMessage='_italic_'\n                    />\n                </i>\n                <span>\n                    {'~~'}\n                    <strike>\n                        <FormattedMessage\n                            id='textbox.strike'\n                            defaultMessage='strike'\n                        />\n                    </strike>\n                    {'~~ '}\n                </span>\n                <code>\n                    <FormattedMessage\n                        id='textbox.inlinecode'\n                        defaultMessage='`inline code`'\n                    />\n                </code>\n                <code>\n                    <FormattedMessage\n                        id='textbox.preformatted'\n                        defaultMessage='```preformatted```'\n                    />\n                </code>\n                <span>\n                    <FormattedMessage\n                        id='textbox.quote'\n                        defaultMessage='>quote'\n                    />\n                </span>\n            </div>\n        );\n       let tutorialTip = null;\n        if (this.state.showTutorialTip) {\n            tutorialTip = this.createTutorialTip();\n        };\n\n    return (\n\n            <div>\n\n\n            <div  ref='wrapper'  className='textarea-wrapper' >\n                <SuggestionBox\n                    ref='message'\n                    currentSuggestion={this.props.currentSuggestion}\n                    className={`form-control custom-textarea ${this.state.connection}`}\n                    type='textarea'\n                    spellCheck='true'\n                    autoComplete='off'\n                    autoCorrect='off'\n                    maxLength={Constants.MAX_POST_LEN}\n                    placeholder={\"compose\"}\n                    value={this.state.messageText}\n                    onUserInput={this.props.onUserInput}\n                    onKeyPress={this.handleKeyPress}\n                    onKeyDown={this.handleKeyDown}\n                    onHeightChange={this.handleHeightChange}\n                    style={{visibility: this.state.preview ? 'hidden' : 'visible'}}\n                    listComponent={SuggestionList}\n                    providers={this.suggestionProviders}\n                    channelId={this.props.currentChat.id}\n                    onUserInput={this.handleUserInput}\n                    onKeyPress={this.postMsgKeyPress}\n                    onKeyDown={this.handleKeyDown}\n                                id='message_textbox'\n                                ref='textbox'\n                />\n\n                                    <FileUpload\n                                    ref='fileUpload'\n                                    getFileCount={this.getFileCount}\n                                    onClick={this.handleUploadClick}\n                                    onUploadStart={this.handleUploadStart}\n                                    onFileUpload={this.handleFileUploadComplete}\n                                    onUploadError={this.handleUploadError}\n                                    postType='post'\n                                    channelId=''\n                            />\n\n\n            </div>\n\n\n\n\n\n                <div className='help__text'>\n                    {helpText}\n                    {previewLink}\n                    <a\n                        target='_blank'\n                        href='/help/getting-started/messaging-basics.html'\n                        className='textbox-help-link'\n                    >\n                        <FormattedMessage\n                            id='textbox.help'\n                            defaultMessage='Help'\n                        />\n                    </a>\n                </div>\n\n\n\n                        {tutorialTip}\n\n\n                    <div className={postFooterClassName}>\n                        <MsgTyping\n                            channelId={this.state.channelId}\n                            parentId={''}\n                        />\n                        {preview}\n                        {postError}\n                        {serverError}\n                    </div>\n    </div>\n\n\n    );\n  },\n\nfocus() {\n        this.refs.message.getTextbox().focus();\n    },\nfocusTextbox() {\n        if (!Utils.isMobile()) {\n            this.refs.textbox.focus();\n        }\n    },\n\n\nshowPreview(e) {\n        e.preventDefault();\n        e.target.blur();\n        this.setState({preview: !this.state.preview});\n    },\n\n  _onChange: function(event, value) {\n    this.setState({text: event.target.value});\n  },\n\n  _onKeyDown: function(event) {\n    if (event.keyCode === ENTER_KEY_CODE) {\n      event.preventDefault();\n      var text = this.state.text.trim();\n      if (text) {\n        //ChatMessageActionCreators.createMessage(text, this.props.chat,chat_type=ChatTypeStore.getCurrent());\n         this.props.actions.createMessage(text,this.props.currentChat);\n\n      }\n      this.setState({text: ''});\n    }\n  }\n\n});\n\nexport default injectIntl(MessageComposer);\n\n\n\n/** WEBPACK FOOTER **\n ** ./web/static/js/app/components/chat/MessageComposer.react.js\n **/"],"sourceRoot":""}